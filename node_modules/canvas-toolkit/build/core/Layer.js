'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var Layer = (function () {
  function Layer(_ref) {
    var width = _ref.width;
    var height = _ref.height;

    _classCallCheck(this, Layer);

    this.canvasEl = document.createElement('canvas');
    this.width = width;
    this.height = height;
    this.elements = [];
    this.canvas = this.canvasEl.getContext('2d');
    this.canvasEl.style.position = 'absolute';
    this.canvasEl.style.left = this.left + 'px';
    this.canvasEl.style.top = this.top + 'px';
  }

  _createClass(Layer, [{
    key: 'add',
    value: function add(element) {
      this.elements.push(element);
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.elements = [];
      this.canvas.clearRect(0, 0, this.width, this.height);
    }
  }, {
    key: 'draw',
    value: function draw() {
      var _this = this;

      if (this._elementsAreDirty()) {
        this.canvas.clearRect(0, 0, this.width, this.height);
        _underscore2['default'].each(this.elements, function (element) {
          element.drawTo(_this.canvas);
        });
      }
    }
  }, {
    key: '_elementsAreDirty',
    value: function _elementsAreDirty() {
      return _underscore2['default'].any(this.elements, function (el) {
        return el.isDirty;
      });
    }
  }, {
    key: '_refreshCanvas',
    value: function _refreshCanvas() {
      this.canvasEl.width = this._width;
      this.canvasEl.height = this._height;
      this.canvasEl.style.width = '' + this._width + 'px';
      this.canvasEl.style.height = '' + this._height + 'px';
    }
  }, {
    key: 'width',
    get: function () {
      return this._width;
    },
    set: function (val) {
      this._width = val;
      this._refreshCanvas();
    }
  }, {
    key: 'height',
    get: function () {
      return this._height;
    },
    set: function (val) {
      this._height = val;
      this._refreshCanvas();
    }
  }]);

  return Layer;
})();

exports['default'] = Layer;
module.exports = exports['default'];