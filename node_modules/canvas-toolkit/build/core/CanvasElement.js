'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _util = require('./util');

var CanvasElement = (function () {
  function CanvasElement(options) {
    _classCallCheck(this, _CanvasElement);

    options = _underscore2['default'].defaults(options || {}, {
      left: 0,
      top: 0
    });
    this.isDirty = true;
    this.left = options.left;
    this.top = options.top;
    this.width = options.width;
    this.height = options.height;
    this.rotate = options.rotate;
    this.children = [];
  }

  var _CanvasElement = CanvasElement;

  _createClass(_CanvasElement, [{
    key: 'draw',
    value: function draw() {
      var _this = this;

      _underscore2['default'].each(this.children, function (child) {
        _this.canvas.save();
        child.drawTo(_this.canvas);
        _this.canvas.restore();
      });
    }
  }, {
    key: 'drawTo',
    value: function drawTo(canvas) {
      this.canvas = canvas;
      this.canvas.save();
      this.canvas.translate(this.left, this.top);
      if (this.rotate != 0) {
        this.canvas.rotate(Math.PI / 180 * this.rotate);
      }
      this.draw(canvas);
      this.canvas.restore();
      this.canvas = undefined;
      this.isDirty = false;
    }
  }, {
    key: 'addChild',
    value: function addChild(element) {
      this.children.push(element);
    }
  }, {
    key: 'isDirty',
    get: function () {
      return this._isDirty || _underscore2['default'].any(this.children, function (child) {
        return child.isDirty;
      });
    },
    set: function (value) {
      this._isDirty = value;
    }
  }]);

  CanvasElement = (0, _util.RedrawProperties)(['left', 'top', 'width', 'height', 'rotate'])(CanvasElement) || CanvasElement;
  return CanvasElement;
})();

exports['default'] = CanvasElement;
module.exports = exports['default'];