'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _coreCanvasElement = require('../core/CanvasElement');

var _coreCanvasElement2 = _interopRequireDefault(_coreCanvasElement);

var _coreUtil = require('../core/util');

var Line = (function (_CanvasElement) {
  function Line(options) {
    _classCallCheck(this, _Line);

    _get(Object.getPrototypeOf(_Line.prototype), 'constructor', this).call(this, options);

    (0, _coreUtil.checkOptions)(options, ['x1', 'y1', 'x2', 'y2']);

    this.x1 = options.x1;
    this.y1 = options.y1;
    this.x2 = options.x2;
    this.y2 = options.y2;

    this.color = options.color || '#000';
    this.lineCap = options.lineCap || 'square';
    this.dashed = options.dashed || false;
    this.dashSpacing = options.dashSpacing || [10, 5];
    this.thickness = options.thickness || 1;
  }

  _inherits(Line, _CanvasElement);

  var _Line = Line;

  _createClass(_Line, [{
    key: 'draw',
    value: function draw() {
      if (this.dashed) {
        this._drawDashedLine();
      } else {
        this._drawRegularLine();
      }
    }
  }, {
    key: '_drawRegularLine',
    value: function _drawRegularLine() {
      this.canvas.beginPath();
      this.canvas.lineWidth = this.thickness;
      this.canvas.strokeStyle = this.color;
      this.canvas.lineCap = this.lineCap;
      this.canvas.moveTo(this.x1, this.y1);
      this.canvas.lineTo(this.x2, this.y2);
      this.canvas.stroke();
    }
  }, {
    key: '_drawDashedLine',
    value: function _drawDashedLine() {
      this._dashedLine(this.x1, this.y1, this.x2, this.y2, this.dashSpacing);
    }
  }, {
    key: '_dashedLine',

    //Draw a dashed line onto the current context.
    //http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas
    // this.param x {Number} start x position
    // this.param y {Number} start y position
    // this.param x2 {Number} end x position
    // this.param y2 {Number} end y position
    // this.param da {Array} an array of two values. The first value is how long of a dash to draw,
    // the second is how much space before the next dash.
    value: function _dashedLine(x, y, x2, y2, da) {
      if (!da) {
        da = [10, 5];
      }
      this.canvas.save();
      var dx = x2 - x;
      var dy = y2 - y;
      var len = Math.sqrt(dx * dx + dy * dy);
      var rot = Math.atan2(dy, dx);
      this.canvas.strokeStyle = this.color;
      this.canvas.lineCap = this.lineCap;
      this.canvas.lineWidth = this.thickness;
      this.canvas.translate(x, y);
      this.canvas.moveTo(0, 0);
      this.canvas.rotate(rot);
      this.canvas.beginPath();
      var dc = da.length;
      var di = 0;
      var draw = true;
      x = 0;
      while (len > x) {
        x += da[di++ % dc];
        if (x > len) {
          x = len;
        }
        if (draw) {
          this.canvas.lineTo(x, 0);
        } else {
          this.canvas.moveTo(x, 0);
        }
        draw = !draw;
      }
      this.canvas.stroke();
      this.canvas.restore();
    }
  }]);

  Line = (0, _coreUtil.RedrawProperties)(['x1', 'x2', 'y1', 'y2', 'color', 'lineCap', 'dashed', 'dashSpacing', 'thickness'])(Line) || Line;
  return Line;
})(_coreCanvasElement2['default']);

exports['default'] = Line;
module.exports = exports['default'];