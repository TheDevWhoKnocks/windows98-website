'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _2 = require('.');

function randomColor() {
  return '#' + Math.floor(Math.random() * 16777215).toString(16);
}

var Examples = (function (_LayeredElement) {
  function Examples() {
    _classCallCheck(this, Examples);

    _get(Object.getPrototypeOf(Examples.prototype), 'constructor', this).call(this);
    this._createCountTest();
    this._createMultipleElements();
    this._createLineTest();
    this._createDashedLine();
    this._createManyRectangles();
    this._createOneTriangle();
    this._createManyTriangles();
    this._createManyPaths();
    this._createManyCircles();
    this._createProgressSemiCircle();
    this._createSpinningSemiCircle();
  }

  _inherits(Examples, _LayeredElement);

  _createClass(Examples, [{
    key: '_createCountTest',
    value: function _createCountTest() {
      var layer = this.createLayer();
      var counter = new _2.Text({
        left: 200,
        top: 100,
        text: 'Count: 0',
        color: 'red',
        font: {
          family: 'DejaVu Sans Mono',
          size: 44
        }
      });
      layer.add(counter);
      var count = 0;
      setInterval(function () {
        counter.text = 'Count: ' + count++;
      }, 10);
    }
  }, {
    key: '_createMultipleElements',
    value: function _createMultipleElements() {
      var layer = this.createLayer();
      var c1 = new _2.Text({
        text: 'Counter 1: 0',
        left: 50,
        top: 10
      });
      var c2 = new _2.Text({
        text: 'Counter 2: 0',
        left: 50,
        top: 30
      });
      layer.add(c1);
      layer.add(c2);
      var count1 = 0;
      var count2 = 0;
      setInterval(function () {
        c1.text = 'Counter 1: ' + count1++;
      }, 100);
      setInterval(function () {
        c2.text = 'Counter 2: ' + count2++;
      }, 10);
    }
  }, {
    key: '_createLineTest',
    value: function _createLineTest() {
      var _this = this;

      var layer = this.createLayer();
      var backbone = new _2.Line({
        top: 50,
        left: -50,
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 400,
        color: '#a7c'
      });
      layer.add(backbone);

      var lines = [];
      for (var i = 0; i < 100; i++) {
        lines.push(new _2.Line({
          top: 50 + 400 * Math.random(),
          left: -50,
          x1: 0,
          y1: 0,
          x2: 0,
          y2: 500
        }));
      }

      _underscore2['default'].each(lines, function (line) {
        line.rotator = 0;
        layer.add(line);
      });

      setInterval(function () {
        backbone.x1 = (backbone.x1 + 0.5) % (_this.width + 100);
        backbone.x2 = backbone.x1;
        _underscore2['default'].each(lines, function (line) {
          line.rotator += Math.random() * 0.02;
          line.x1 = (line.x1 + 0.5) % (_this.width + 100);
          line.x2 = Math.cos(line.rotator) * 100 + line.x1;
          line.y2 = Math.sin(line.rotator) * 100;
        });
      }, 10);
      setInterval(function () {
        _underscore2['default'].each(lines, function (line) {
          var red = Math.round(Math.random() * 255);
          var green = Math.round(Math.random() * 255);
          var blue = Math.round(Math.random() * 255);
          line.color = 'rgb(' + red + ',' + green + ',' + blue + ')';
        });
      }, 1000);
    }
  }, {
    key: '_createDashedLine',
    value: function _createDashedLine() {
      var layer = this.createLayer();
      var dashedLine = new _2.Line({
        left: 100,
        top: 100,
        x1: 0,
        y1: 0,
        x2: 500,
        y2: 500,
        dashed: true
      });
      layer.add(dashedLine);

      var red = Math.round(Math.random() * 255);
      var green = Math.round(Math.random() * 255);
      var blue = Math.round(Math.random() * 255);
      var d1 = 10;
      var d2 = 5;

      setInterval(function () {
        dashedLine.color = 'rgb(' + red + ',' + green + ',' + blue + ')';
        red = (red + 1) % 255;
        green = (green + 2) % 255;
        blue = (blue + 3) % 255;
        dashedLine.thickness += 0.1;
        dashedLine.dashSpacing = [d1, d2];
        d1 += 0.1;
        d2 += 0.1;
      }, 50);
    }
  }, {
    key: '_createManyRectangles',
    value: function _createManyRectangles() {
      var _this2 = this;

      var layer = this.createLayer();
      var rects = [];
      for (var i = 0; i < 100; i++) {
        var fill = false;
        var stroke = false;
        if (Math.random() > 0.9) {
          fill = true;
          stroke = true;
        } else if (Math.random() > 0.75) {
          fill = false;
          stroke = true;
        } else {
          fill = true;
        }
        var rect = new _2.Rectangle({
          left: Math.random() * 750,
          top: Math.random() * 400,
          width: Math.random() * 50 + 10,
          height: Math.random() * 25 + 10,
          fill: fill,
          fillColor: randomColor(),
          stroke: true,
          strokeColor: randomColor(),
          strokeThickness: Math.random() * 10
        });
        rects.push(rect);
        layer.add(rect);
      }
      setInterval(function () {
        _underscore2['default'].each(rects, function (rect) {
          rect.left += 1;
          rect.left = rect.left % _this2.width;
        });
      }, 20);
    }
  }, {
    key: '_createOneTriangle',
    value: function _createOneTriangle() {
      var layer = this.createLayer();
      var triangle = new _2.Triangle({
        left: 100,
        top: 100,
        width: 10,
        height: 50,
        fill: true,
        fillColor: randomColor(),
        stroke: true,
        strokeColor: randomColor(),
        strokeThickness: 2,
        rotate: 0
      });
      layer.add(triangle);
      setInterval(function () {
        triangle.rotate += 1;
      }, 10);
    }
  }, {
    key: '_createManyTriangles',
    value: function _createManyTriangles() {
      var _this3 = this;

      var layer = this.createLayer();
      var triangles = [];
      for (var i = 0; i < 100; i++) {
        var fill = false;
        var stroke = false;
        var inverted = false;
        var choice = Math.random();
        if (choice > 0.9) {
          fill = true;
          stroke = true;
          inverted = true;
        } else if (choice > 0.5) {
          fill = false;
          stroke = true;
          inverted = true;
        } else {
          fill = true;
          inverted = false;
        }
        var triangle = new _2.Triangle({
          left: Math.random() * 750,
          top: Math.random() * 400,
          width: Math.random() * 50 + 10,
          height: Math.random() * 25 + 10,
          fill: fill,
          fillColor: randomColor(),
          stroke: true,
          strokeColor: randomColor(),
          strokeThickness: Math.random() * 10,
          rotate: Math.random() * 360
        });
        triangles.push(triangle);
        layer.add(triangle);
      }
      setInterval(function () {
        _underscore2['default'].each(triangles, function (triangle) {
          triangle.left += 1;
          triangle.left = triangle.left % _this3.width;
        });
      }, 20);
    }
  }, {
    key: '_createManyPaths',
    value: function _createManyPaths() {
      var _this4 = this;

      var layer = this.createLayer();
      var paths = [];
      for (var i = 0; i < 100; i++) {
        var path = new _2.Path({
          left: Math.random() * 750,
          top: Math.random() * 400,
          fill: true,
          fillColor: randomColor(),
          stroke: true,
          strokeColor: randomColor(),
          strokeThickness: 2,
          rotate: Math.random() * 360,
          path: [[[0, 0], [10, 10], [40, 20], [50, -10], [60, 5]], [[10, 0], [20, 10], [30, 0]]]
        });
        paths.push(path);
        layer.add(path);
      }
      setInterval(function () {
        _underscore2['default'].each(paths, function (path) {
          path.left += 1;
          path.left = path.left % _this4.width;
        });
      }, 20);
    }
  }, {
    key: '_createManyCircles',
    value: function _createManyCircles() {
      var _this5 = this;

      var layer = this.createLayer();
      var circles = [];
      for (var i = 0; i < 1000; i++) {
        var circle = new _2.Circle({
          left: Math.random() * 750,
          top: Math.random() * 400,
          fill: Math.random() > 0.5,
          fillColor: randomColor(),
          stroke: Math.random() > 0.5,
          strokeColor: randomColor(),
          strokeThickness: Math.random() * 5,
          radius: Math.random() * 20,
          rotate: Math.random() * 360,
          angle: Math.random() * 360
        });
        circles.push(circle);
        layer.add(circle);
      }
      setInterval(function () {
        _underscore2['default'].each(circles, function (circle) {
          circle.left += 1;
          circle.left = circle.left % _this5.width;
        });
      }, 20);
    }
  }, {
    key: '_createProgressSemiCircle',
    value: function _createProgressSemiCircle() {
      var layer = this.createLayer();
      var circle = new _2.Circle({
        left: 100,
        top: 100,
        fill: false,
        stroke: true,
        strokeColor: 'red',
        strokeThickness: 10,
        radius: 50,
        rotate: 0,
        angle: 0
      });
      layer.add(circle);
      setInterval(function () {
        circle.angle += 1;
        circle.angle = circle.angle % 360;
      }, 20);
    }
  }, {
    key: '_createSpinningSemiCircle',
    value: function _createSpinningSemiCircle() {
      var layer = this.createLayer();
      var circle = new _2.Circle({
        left: 100,
        top: 100,
        fill: false,
        stroke: true,
        strokeColor: 'blue',
        strokeThickness: 10,
        radius: 50,
        rotate: 0,
        angle: 180
      });
      layer.add(circle);
      setInterval(function () {
        circle.rotate += 1;
        circle.rotate = circle.rotate % 360;
      }, 20);
    }
  }]);

  return Examples;
})(_2.LayeredElement);

window.addEventListener('load', function () {
  this.canvas = new _2.Canvas({
    width: 750,
    height: 500,
    container: document.querySelector('#canvas')
  });
  var examples = new Examples();
  this.canvas.add(examples);
});